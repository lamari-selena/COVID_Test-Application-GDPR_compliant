variables:
  SERVICE_NAME: location_service
  REPOSITORY_URL: 961822111490.dkr.ecr.us-east-1.amazonaws.com
  APP_NAME: covid-alert-services
  IMAGE_TAG: location_service
  ARTIFACT_NAME: location_service-0.0.1.jar

services:
  - docker:dind

stages:
  - build-jar
  - build-image
  - deploy-image

before_script:
  - docker --version
  - apk add --no-cache curl jq python3 py3-pip
  - pip install awscli
  - aws --version
  - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
  - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
  - aws configure set region ${AWS_DEFAULT_REGION}
  - aws configure list

build-microservice-jar:
  image: openjdk:16-jdk-alpine
  stage: build-jar

  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - echo $ARTIFACT_NAME
  script:
    - ls -l $SERVICE_NAME/
    - ./gradlew $SERVICE_NAME:bootJar
    - ls -l $SERVICE_NAME/build/libs/
  artifacts:
    paths:
      - $SERVICE_NAME/build/libs/*.jar
  only:
    - master

build-docker-image:
  stage: build-image

  script:
    - echo "Building image..."
    - ls -l $SERVICE_NAME/build/libs/
    - docker build -t $REPOSITORY_URL/$APP_NAME:$IMAGE_TAG ./$SERVICE_NAME
    - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URL
    - echo "Pushing image..."
    - docker push $REPOSITORY_URL/$APP_NAME:$IMAGE_TAG
  only:
    - master



deploy-docker-image:
  stage: deploy-image
  before_script:
    - ls -la
    - pwd
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo $EC2_SSH_KEY
    - echo "${EC2_SSH_KEY}" >> ~/.ssh/ssh-key.pem
    - chmod 400 ~/.ssh/ssh-key.pem
    - cat ~/.ssh/ssh-key.pem
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config


  script:
    - >-
      ssh -tt -i ~/.ssh/ssh-key.pem ec2-user@${EC2_URL} \
      '
      ls
      && cd covid-alert-services
      && ls
      && aws --version
      && docker --version
      && aws configure list
      && aws ecr get-login-password | docker login --username AWS --password-stdin '"$REPOSITORY_URL"'
      && docker pull '"$REPOSITORY_URL/$APP_NAME:$IMAGE_TAG"'
      && docker-compose stop location-service
      && docker rm -f $(docker ps -q --filter "status=exited")
      && docker-compose up -d location-service
      '
  only:
    - master
